@mixin input($component, $colors) {
	@each $color in $colors {
		.#{$component}-color-#{"" + $color} {
			display: inline-flex;

			.field {
				--uiFieldBorderWidth: var(--fieldBorderWidth, 2px);
				--uiFieldPaddingRight: var(--fieldPaddingRight, 1rem);
				--uiFieldPaddingLeft: var(--fieldPaddingLeft, 1rem);

				display: var(--fieldDisplay, inline-flex);
				position: relative;
				font-size: var(--fieldFontSize, 1rem);

				.ha-screen-reader{
					width: var(--ha-screen-reader-width, 1px);
					height: var(--ha-screen-reader-height, 1px);
					padding: var(--ha-screen-reader-padding, 0);
					border: var(--ha-screen-reader-border, none);

					position: var(--ha-screen-reader-position, absolute);
					clip: var(--ha-screen-reader-clip, rect(1px, 1px, 1px, 1px));
					overflow: var(--ha-screen-reader-overflow, hidden);
				}

				&__input {
					--uiFieldPlaceholderColor: var(--fieldPlaceholderColor, #767676);
					background-color: transparent;
					border-radius: 0;
					border: none;
					-webkit-appearance: none;
					-moz-appearance: none;
					font-family: inherit;
					font-size: inherit;
					box-sizing: border-box;
					width: var(--fieldWidth, 100%);
					height: var(--fieldHeight, 3rem);
					padding: var(--fieldPaddingTop, 1.25rem) var(--uiFieldPaddingRight) var(--fieldPaddingBottom, .5rem) var(--uiFieldPaddingLeft);
					// статический цвет
					border-bottom: var(--uiFieldBorderWidth) solid var(--fieldBorderColor, rgba(0, 0, 0, .25));

					&::-webkit-input-placeholder {
						opacity: 0;
						transition: opacity .2s ease-out;
					}

					&::-moz-placeholder {
						opacity: 0;
						transition: opacity .2s ease-out;
					}

					&:focus {
						outline: none;

						&::-webkit-input-placeholder {
							color: var(--uiFieldPlaceholderColor);
							opacity: 1;
							transition-delay: .2s;
						}

						&::-moz-placeholder{
							color: var(--uiFieldPlaceholderColor);
							opacity: 1;
							transition-delay: .2s;
						}
					}
				}

				&__label-wrap {
					box-sizing: border-box;
					pointer-events: none;
					cursor: text;
					overflow: hidden;

					position: absolute;
					top: 0;
					right: 0;
					bottom: 0;
					left: 0;

					&::after{
						content: "";
						box-sizing: border-box;
						width: 100%;
						height: 0;
						opacity: 0;

						position: absolute;
						bottom: 0;
						left: 0;
					}
				}

				&__label {
					position: absolute;
					left: var(--uiFieldPaddingLeft);
					top: calc(50% - .5em);

					line-height: 1;
					font-size: var(--fieldHintFontSize, inherit);

					transition: top .2s cubic-bezier(0.9, -0.15, 0.1, 1.15), opacity .2s ease-out, font-size .2s ease-out;
					will-change: bottom, opacity, font-size;
				}

				&__standard {
					overflow: hidden;
				}
			}


			.field__input:focus ~ .field__label-wrap::after{
				opacity: 1;
			}

			.field__input:focus ~ .field__label-wrap .field__label,
			.field__input:not(:placeholder-shown) ~ .field__label-wrap .field__label{
				--fieldHintFontSize: var(--fieldHintFontSizeFocused, .75rem);

				top: var(--fieldHintTopHover, .25rem);
			}

			.field__standard .field__label-wrap::after{
				// движжение цвета
				border-bottom: var(--uiFieldBorderWidth) solid toRgba($color, 0.7);
				transform: translate3d(-105%, 0, 0);
				will-change: transform, opacity;
				transition: transform .285s ease-out .2s, opacity .2s ease-out .2s;
			}

			.field__standard .field__input:focus ~ .field__label-wrap::after{
				transform: translate3d(0, 0, 0);
				transition-delay: 0;
			}
		}
	}
}
